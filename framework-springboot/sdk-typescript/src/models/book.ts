/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of the publication
 */
export const BookType = {
  Book: "Book",
} as const;
/**
 * Type of the publication
 */
export type BookType = ClosedEnum<typeof BookType>;

/**
 * Represents a book in the store
 */
export type Book = {
  /**
   * Unique identifier of the publication
   */
  id?: string | undefined;
  /**
   * Title of the publication
   */
  title?: string | undefined;
  /**
   * Publication date
   */
  publishDate?: string | undefined;
  /**
   * Price in USD
   */
  price?: number | undefined;
  /**
   * Type of the publication
   */
  type?: BookType | undefined;
  /**
   * Author of the book
   */
  author?: string | undefined;
  /**
   * ISBN of the book
   */
  isbn?: string | undefined;
};

/** @internal */
export const BookType$inboundSchema: z.ZodNativeEnum<typeof BookType> = z
  .nativeEnum(BookType);

/** @internal */
export const BookType$outboundSchema: z.ZodNativeEnum<typeof BookType> =
  BookType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookType$ {
  /** @deprecated use `BookType$inboundSchema` instead. */
  export const inboundSchema = BookType$inboundSchema;
  /** @deprecated use `BookType$outboundSchema` instead. */
  export const outboundSchema = BookType$outboundSchema;
}

/** @internal */
export const Book$inboundSchema: z.ZodType<Book, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    title: z.string().optional(),
    publishDate: z.string().optional(),
    price: z.number().optional(),
    type: BookType$inboundSchema.default("Book"),
    author: z.string().optional(),
    isbn: z.string().optional(),
  });

/** @internal */
export type Book$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  publishDate?: string | undefined;
  price?: number | undefined;
  type: string;
  author?: string | undefined;
  isbn?: string | undefined;
};

/** @internal */
export const Book$outboundSchema: z.ZodType<Book$Outbound, z.ZodTypeDef, Book> =
  z.object({
    id: z.string().optional(),
    title: z.string().optional(),
    publishDate: z.string().optional(),
    price: z.number().optional(),
    type: BookType$outboundSchema.default("Book"),
    author: z.string().optional(),
    isbn: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Book$ {
  /** @deprecated use `Book$inboundSchema` instead. */
  export const inboundSchema = Book$inboundSchema;
  /** @deprecated use `Book$outboundSchema` instead. */
  export const outboundSchema = Book$outboundSchema;
  /** @deprecated use `Book$Outbound` instead. */
  export type Outbound = Book$Outbound;
}

export function bookToJSON(book: Book): string {
  return JSON.stringify(Book$outboundSchema.parse(book));
}

export function bookFromJSON(
  jsonString: string,
): SafeParseResult<Book, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Book$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Book' from JSON`,
  );
}
