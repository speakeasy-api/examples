/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of the publication
 */
export const MagazineType = {
  Magazine: "Magazine",
} as const;
/**
 * Type of the publication
 */
export type MagazineType = ClosedEnum<typeof MagazineType>;

/**
 * Represents a magazine in the store
 */
export type Magazine = {
  /**
   * Unique identifier of the publication
   */
  id?: string | undefined;
  /**
   * Title of the publication
   */
  title?: string | undefined;
  /**
   * Publication date
   */
  publishDate?: string | undefined;
  /**
   * Price in USD
   */
  price?: number | undefined;
  /**
   * Type of the publication
   */
  type?: MagazineType | undefined;
  /**
   * Issue number of the magazine
   */
  issueNumber?: number | undefined;
  /**
   * Publisher of the magazine
   */
  publisher?: string | undefined;
};

/** @internal */
export const MagazineType$inboundSchema: z.ZodNativeEnum<typeof MagazineType> =
  z.nativeEnum(MagazineType);

/** @internal */
export const MagazineType$outboundSchema: z.ZodNativeEnum<typeof MagazineType> =
  MagazineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MagazineType$ {
  /** @deprecated use `MagazineType$inboundSchema` instead. */
  export const inboundSchema = MagazineType$inboundSchema;
  /** @deprecated use `MagazineType$outboundSchema` instead. */
  export const outboundSchema = MagazineType$outboundSchema;
}

/** @internal */
export const Magazine$inboundSchema: z.ZodType<
  Magazine,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  publishDate: z.string().optional(),
  price: z.number().optional(),
  type: MagazineType$inboundSchema.default("Magazine"),
  issueNumber: z.number().int().optional(),
  publisher: z.string().optional(),
});

/** @internal */
export type Magazine$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  publishDate?: string | undefined;
  price?: number | undefined;
  type: string;
  issueNumber?: number | undefined;
  publisher?: string | undefined;
};

/** @internal */
export const Magazine$outboundSchema: z.ZodType<
  Magazine$Outbound,
  z.ZodTypeDef,
  Magazine
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  publishDate: z.string().optional(),
  price: z.number().optional(),
  type: MagazineType$outboundSchema.default("Magazine"),
  issueNumber: z.number().int().optional(),
  publisher: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Magazine$ {
  /** @deprecated use `Magazine$inboundSchema` instead. */
  export const inboundSchema = Magazine$inboundSchema;
  /** @deprecated use `Magazine$outboundSchema` instead. */
  export const outboundSchema = Magazine$outboundSchema;
  /** @deprecated use `Magazine$Outbound` instead. */
  export type Outbound = Magazine$Outbound;
}

export function magazineToJSON(magazine: Magazine): string {
  return JSON.stringify(Magazine$outboundSchema.parse(magazine));
}

export function magazineFromJSON(
  jsonString: string,
): SafeParseResult<Magazine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Magazine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Magazine' from JSON`,
  );
}
