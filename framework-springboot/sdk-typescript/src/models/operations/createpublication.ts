/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type Magazine = {};

export type MagazineUnion = Magazine | string;

export type Book = {};

export type BookUnion = Book | string;

export type CreatePublicationRequest = Book | string | Magazine | string;

/**
 * Successful operation
 */
export type CreatePublicationResponse = models.Book | models.Magazine;

/** @internal */
export const Magazine$inboundSchema: z.ZodType<
  Magazine,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Magazine$Outbound = {};

/** @internal */
export const Magazine$outboundSchema: z.ZodType<
  Magazine$Outbound,
  z.ZodTypeDef,
  Magazine
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Magazine$ {
  /** @deprecated use `Magazine$inboundSchema` instead. */
  export const inboundSchema = Magazine$inboundSchema;
  /** @deprecated use `Magazine$outboundSchema` instead. */
  export const outboundSchema = Magazine$outboundSchema;
  /** @deprecated use `Magazine$Outbound` instead. */
  export type Outbound = Magazine$Outbound;
}

export function magazineToJSON(magazine: Magazine): string {
  return JSON.stringify(Magazine$outboundSchema.parse(magazine));
}

export function magazineFromJSON(
  jsonString: string,
): SafeParseResult<Magazine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Magazine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Magazine' from JSON`,
  );
}

/** @internal */
export const MagazineUnion$inboundSchema: z.ZodType<
  MagazineUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => Magazine$inboundSchema), z.string()]);

/** @internal */
export type MagazineUnion$Outbound = Magazine$Outbound | string;

/** @internal */
export const MagazineUnion$outboundSchema: z.ZodType<
  MagazineUnion$Outbound,
  z.ZodTypeDef,
  MagazineUnion
> = z.union([z.lazy(() => Magazine$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MagazineUnion$ {
  /** @deprecated use `MagazineUnion$inboundSchema` instead. */
  export const inboundSchema = MagazineUnion$inboundSchema;
  /** @deprecated use `MagazineUnion$outboundSchema` instead. */
  export const outboundSchema = MagazineUnion$outboundSchema;
  /** @deprecated use `MagazineUnion$Outbound` instead. */
  export type Outbound = MagazineUnion$Outbound;
}

export function magazineUnionToJSON(magazineUnion: MagazineUnion): string {
  return JSON.stringify(MagazineUnion$outboundSchema.parse(magazineUnion));
}

export function magazineUnionFromJSON(
  jsonString: string,
): SafeParseResult<MagazineUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MagazineUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MagazineUnion' from JSON`,
  );
}

/** @internal */
export const Book$inboundSchema: z.ZodType<Book, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Book$Outbound = {};

/** @internal */
export const Book$outboundSchema: z.ZodType<Book$Outbound, z.ZodTypeDef, Book> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Book$ {
  /** @deprecated use `Book$inboundSchema` instead. */
  export const inboundSchema = Book$inboundSchema;
  /** @deprecated use `Book$outboundSchema` instead. */
  export const outboundSchema = Book$outboundSchema;
  /** @deprecated use `Book$Outbound` instead. */
  export type Outbound = Book$Outbound;
}

export function bookToJSON(book: Book): string {
  return JSON.stringify(Book$outboundSchema.parse(book));
}

export function bookFromJSON(
  jsonString: string,
): SafeParseResult<Book, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Book$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Book' from JSON`,
  );
}

/** @internal */
export const BookUnion$inboundSchema: z.ZodType<
  BookUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => Book$inboundSchema), z.string()]);

/** @internal */
export type BookUnion$Outbound = Book$Outbound | string;

/** @internal */
export const BookUnion$outboundSchema: z.ZodType<
  BookUnion$Outbound,
  z.ZodTypeDef,
  BookUnion
> = z.union([z.lazy(() => Book$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookUnion$ {
  /** @deprecated use `BookUnion$inboundSchema` instead. */
  export const inboundSchema = BookUnion$inboundSchema;
  /** @deprecated use `BookUnion$outboundSchema` instead. */
  export const outboundSchema = BookUnion$outboundSchema;
  /** @deprecated use `BookUnion$Outbound` instead. */
  export type Outbound = BookUnion$Outbound;
}

export function bookUnionToJSON(bookUnion: BookUnion): string {
  return JSON.stringify(BookUnion$outboundSchema.parse(bookUnion));
}

export function bookUnionFromJSON(
  jsonString: string,
): SafeParseResult<BookUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookUnion' from JSON`,
  );
}

/** @internal */
export const CreatePublicationRequest$inboundSchema: z.ZodType<
  CreatePublicationRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([z.lazy(() => Book$inboundSchema), z.string()]),
  z.union([z.lazy(() => Magazine$inboundSchema), z.string()]),
]);

/** @internal */
export type CreatePublicationRequest$Outbound =
  | Book$Outbound
  | string
  | Magazine$Outbound
  | string;

/** @internal */
export const CreatePublicationRequest$outboundSchema: z.ZodType<
  CreatePublicationRequest$Outbound,
  z.ZodTypeDef,
  CreatePublicationRequest
> = z.union([
  z.union([z.lazy(() => Book$outboundSchema), z.string()]),
  z.union([z.lazy(() => Magazine$outboundSchema), z.string()]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationRequest$ {
  /** @deprecated use `CreatePublicationRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationRequest$inboundSchema;
  /** @deprecated use `CreatePublicationRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePublicationRequest$outboundSchema;
  /** @deprecated use `CreatePublicationRequest$Outbound` instead. */
  export type Outbound = CreatePublicationRequest$Outbound;
}

export function createPublicationRequestToJSON(
  createPublicationRequest: CreatePublicationRequest,
): string {
  return JSON.stringify(
    CreatePublicationRequest$outboundSchema.parse(createPublicationRequest),
  );
}

export function createPublicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePublicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationRequest' from JSON`,
  );
}

/** @internal */
export const CreatePublicationResponse$inboundSchema: z.ZodType<
  CreatePublicationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.Book$inboundSchema, models.Magazine$inboundSchema]);

/** @internal */
export type CreatePublicationResponse$Outbound =
  | models.Book$Outbound
  | models.Magazine$Outbound;

/** @internal */
export const CreatePublicationResponse$outboundSchema: z.ZodType<
  CreatePublicationResponse$Outbound,
  z.ZodTypeDef,
  CreatePublicationResponse
> = z.union([models.Book$outboundSchema, models.Magazine$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationResponse$ {
  /** @deprecated use `CreatePublicationResponse$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationResponse$inboundSchema;
  /** @deprecated use `CreatePublicationResponse$outboundSchema` instead. */
  export const outboundSchema = CreatePublicationResponse$outboundSchema;
  /** @deprecated use `CreatePublicationResponse$Outbound` instead. */
  export type Outbound = CreatePublicationResponse$Outbound;
}

export function createPublicationResponseToJSON(
  createPublicationResponse: CreatePublicationResponse,
): string {
  return JSON.stringify(
    CreatePublicationResponse$outboundSchema.parse(createPublicationResponse),
  );
}

export function createPublicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePublicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationResponse' from JSON`,
  );
}
