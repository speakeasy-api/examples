/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetPublicationRequest = {
  /**
   * ID of the publication to retrieve
   */
  id: string;
};

/**
 * Successful operation
 */
export type GetPublicationResponse = models.Book | models.Magazine;

/** @internal */
export const GetPublicationRequest$inboundSchema: z.ZodType<
  GetPublicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetPublicationRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetPublicationRequest$outboundSchema: z.ZodType<
  GetPublicationRequest$Outbound,
  z.ZodTypeDef,
  GetPublicationRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublicationRequest$ {
  /** @deprecated use `GetPublicationRequest$inboundSchema` instead. */
  export const inboundSchema = GetPublicationRequest$inboundSchema;
  /** @deprecated use `GetPublicationRequest$outboundSchema` instead. */
  export const outboundSchema = GetPublicationRequest$outboundSchema;
  /** @deprecated use `GetPublicationRequest$Outbound` instead. */
  export type Outbound = GetPublicationRequest$Outbound;
}

export function getPublicationRequestToJSON(
  getPublicationRequest: GetPublicationRequest,
): string {
  return JSON.stringify(
    GetPublicationRequest$outboundSchema.parse(getPublicationRequest),
  );
}

export function getPublicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPublicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPublicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublicationRequest' from JSON`,
  );
}

/** @internal */
export const GetPublicationResponse$inboundSchema: z.ZodType<
  GetPublicationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([models.Book$inboundSchema, models.Magazine$inboundSchema]);

/** @internal */
export type GetPublicationResponse$Outbound =
  | models.Book$Outbound
  | models.Magazine$Outbound;

/** @internal */
export const GetPublicationResponse$outboundSchema: z.ZodType<
  GetPublicationResponse$Outbound,
  z.ZodTypeDef,
  GetPublicationResponse
> = z.union([models.Book$outboundSchema, models.Magazine$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublicationResponse$ {
  /** @deprecated use `GetPublicationResponse$inboundSchema` instead. */
  export const inboundSchema = GetPublicationResponse$inboundSchema;
  /** @deprecated use `GetPublicationResponse$outboundSchema` instead. */
  export const outboundSchema = GetPublicationResponse$outboundSchema;
  /** @deprecated use `GetPublicationResponse$Outbound` instead. */
  export type Outbound = GetPublicationResponse$Outbound;
}

export function getPublicationResponseToJSON(
  getPublicationResponse: GetPublicationResponse,
): string {
  return JSON.stringify(
    GetPublicationResponse$outboundSchema.parse(getPublicationResponse),
  );
}

export function getPublicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPublicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPublicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublicationResponse' from JSON`,
  );
}
