/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Pet,
  Pet$inboundSchema,
  Pet$Outbound,
  Pet$outboundSchema,
} from "./pet.js";

export const Type = {
  PetCreated: "pet.created",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type PetCreated = {
  type: Type;
  pet: Pet;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const PetCreated$inboundSchema: z.ZodType<
  PetCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema,
  pet: Pet$inboundSchema,
});

/** @internal */
export type PetCreated$Outbound = {
  type: string;
  pet: Pet$Outbound;
};

/** @internal */
export const PetCreated$outboundSchema: z.ZodType<
  PetCreated$Outbound,
  z.ZodTypeDef,
  PetCreated
> = z.object({
  type: Type$outboundSchema,
  pet: Pet$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PetCreated$ {
  /** @deprecated use `PetCreated$inboundSchema` instead. */
  export const inboundSchema = PetCreated$inboundSchema;
  /** @deprecated use `PetCreated$outboundSchema` instead. */
  export const outboundSchema = PetCreated$outboundSchema;
  /** @deprecated use `PetCreated$Outbound` instead. */
  export type Outbound = PetCreated$Outbound;
}

export function petCreatedToJSON(petCreated: PetCreated): string {
  return JSON.stringify(PetCreated$outboundSchema.parse(petCreated));
}

export function petCreatedFromJSON(
  jsonString: string,
): SafeParseResult<PetCreated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PetCreated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PetCreated' from JSON`,
  );
}
