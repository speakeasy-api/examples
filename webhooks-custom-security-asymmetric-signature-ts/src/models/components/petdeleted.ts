/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PetDeletedType = {
  PetDeleted: "pet.deleted",
} as const;
export type PetDeletedType = ClosedEnum<typeof PetDeletedType>;

export type PetDeleted = {
  type: PetDeletedType;
  id: string;
};

/** @internal */
export const PetDeletedType$inboundSchema: z.ZodNativeEnum<
  typeof PetDeletedType
> = z.nativeEnum(PetDeletedType);

/** @internal */
export const PetDeletedType$outboundSchema: z.ZodNativeEnum<
  typeof PetDeletedType
> = PetDeletedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PetDeletedType$ {
  /** @deprecated use `PetDeletedType$inboundSchema` instead. */
  export const inboundSchema = PetDeletedType$inboundSchema;
  /** @deprecated use `PetDeletedType$outboundSchema` instead. */
  export const outboundSchema = PetDeletedType$outboundSchema;
}

/** @internal */
export const PetDeleted$inboundSchema: z.ZodType<
  PetDeleted,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PetDeletedType$inboundSchema,
  id: z.string(),
});

/** @internal */
export type PetDeleted$Outbound = {
  type: string;
  id: string;
};

/** @internal */
export const PetDeleted$outboundSchema: z.ZodType<
  PetDeleted$Outbound,
  z.ZodTypeDef,
  PetDeleted
> = z.object({
  type: PetDeletedType$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PetDeleted$ {
  /** @deprecated use `PetDeleted$inboundSchema` instead. */
  export const inboundSchema = PetDeleted$inboundSchema;
  /** @deprecated use `PetDeleted$outboundSchema` instead. */
  export const outboundSchema = PetDeleted$outboundSchema;
  /** @deprecated use `PetDeleted$Outbound` instead. */
  export type Outbound = PetDeleted$Outbound;
}

export function petDeletedToJSON(petDeleted: PetDeleted): string {
  return JSON.stringify(PetDeleted$outboundSchema.parse(petDeleted));
}

export function petDeletedFromJSON(
  jsonString: string,
): SafeParseResult<PetDeleted, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PetDeleted$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PetDeleted' from JSON`,
  );
}
