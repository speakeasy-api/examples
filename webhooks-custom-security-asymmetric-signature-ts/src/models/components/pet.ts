/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Pet = {
  id: string;
};

/** @internal */
export const Pet$inboundSchema: z.ZodType<Pet, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
  });

/** @internal */
export type Pet$Outbound = {
  id: string;
};

/** @internal */
export const Pet$outboundSchema: z.ZodType<Pet$Outbound, z.ZodTypeDef, Pet> = z
  .object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pet$ {
  /** @deprecated use `Pet$inboundSchema` instead. */
  export const inboundSchema = Pet$inboundSchema;
  /** @deprecated use `Pet$outboundSchema` instead. */
  export const outboundSchema = Pet$outboundSchema;
  /** @deprecated use `Pet$Outbound` instead. */
  export type Outbound = Pet$Outbound;
}

export function petToJSON(pet: Pet): string {
  return JSON.stringify(Pet$outboundSchema.parse(pet));
}

export function petFromJSON(
  jsonString: string,
): SafeParseResult<Pet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pet' from JSON`,
  );
}
