/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PetstoreCore } from "../core.js";
import * as components from "../models/components/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { ERR, Result } from "../types/fp.js";
import { WebhookAuthenticationError } from "../types/webhooks.js";

export async function validateWebhook(client: PetstoreCore, {
  request: rawRequest,
  secret,
}: {
  request: {
    body: BodyInit;
    method: string;
    url: string;
    headers: Record<string, string> | Headers;
  } | Request;
  secret: string;
}): Promise<
  Result<
    components.PetCreated | components.PetDeleted,
    SDKValidationError | WebhookAuthenticationError
  >
> {
  const request = normalizeRequest(rawRequest);
  const verifyResult = await client._verifyWebhook({ request, secret });
  if (!verifyResult.ok) {
    return verifyResult;
  }
  const knownSchemas = [
    components.petCreatedFromJSON,
    components.petDeletedFromJSON,
  ];

  for (const schema of knownSchemas) {
    const ret = schema(await request.text());
    if (ret.ok) {
      return ret;
    }
  }

  return ERR(
    new SDKValidationError(
      "No matching schema found for the given webhook payload",
      "",
      request.body,
    ),
  );
}

function normalizeRequest(
  request: {
    body: BodyInit;
    method: string;
    url: string;
    headers: Record<string, string> | Headers;
  } | Request,
): Request {
  if (request instanceof Request) {
    return request;
  }
  return new Request(request.url, request);
}
