/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ordersCreate } from "../funcs/ordersCreate.js";
import { ordersDelete } from "../funcs/ordersDelete.js";
import { ordersGetById } from "../funcs/ordersGetById.js";
import { ordersList } from "../funcs/ordersList.js";
import { ordersUpdate } from "../funcs/ordersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Orders extends ClientSDK {
  /**
   * Get Orders
   *
   * @remarks
   * Retrieve all coffee orders.
   * If 'coffee_type' is provided, returns orders matching that coffee type.
   */
  async list(
    request: operations.GetOrdersRequest,
    options?: RequestOptions,
  ): Promise<Array<components.CoffeeOrder>> {
    return unwrapAsync(ordersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Order
   *
   * @remarks
   * Create a new coffee order.
   * Validates that the coffee type exists.
   */
  async create(
    request: components.CoffeeOrder,
    options?: RequestOptions,
  ): Promise<components.CoffeeOrder> {
    return unwrapAsync(ordersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Order
   *
   * @remarks
   * Retrieve a specific coffee order by its ID.
   */
  async getById(
    request: operations.GetOrderRequest,
    options?: RequestOptions,
  ): Promise<components.CoffeeOrder> {
    return unwrapAsync(ordersGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Order
   *
   * @remarks
   * Update an existing coffee order.
   */
  async update(
    request: operations.UpdateOrderRequest,
    options?: RequestOptions,
  ): Promise<components.CoffeeOrder> {
    return unwrapAsync(ordersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Order
   *
   * @remarks
   * Delete a coffee order.
   */
  async delete(
    request: operations.DeleteOrderRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ordersDelete(
      this,
      request,
      options,
    ));
  }
}
