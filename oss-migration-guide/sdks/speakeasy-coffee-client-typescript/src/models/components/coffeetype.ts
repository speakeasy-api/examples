/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents a type of coffee available in the system
 */
export type CoffeeType = {
  /**
   * Name of the coffee type
   */
  name: string;
  /**
   * Detailed description of the coffee type
   */
  description?: string | null | undefined;
  /**
   * Unique identifier for the coffee type
   */
  id: number;
  /**
   * Price multiplier for this coffee type
   */
  priceMultiplier?: number | null | undefined;
};

/** @internal */
export const CoffeeType$inboundSchema: z.ZodType<
  CoffeeType,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  price_multiplier: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "price_multiplier": "priceMultiplier",
  });
});

/** @internal */
export type CoffeeType$Outbound = {
  name: string;
  description?: string | null | undefined;
  id: number;
  price_multiplier?: number | null | undefined;
};

/** @internal */
export const CoffeeType$outboundSchema: z.ZodType<
  CoffeeType$Outbound,
  z.ZodTypeDef,
  CoffeeType
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  priceMultiplier: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    priceMultiplier: "price_multiplier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CoffeeType$ {
  /** @deprecated use `CoffeeType$inboundSchema` instead. */
  export const inboundSchema = CoffeeType$inboundSchema;
  /** @deprecated use `CoffeeType$outboundSchema` instead. */
  export const outboundSchema = CoffeeType$outboundSchema;
  /** @deprecated use `CoffeeType$Outbound` instead. */
  export type Outbound = CoffeeType$Outbound;
}

export function coffeeTypeToJSON(coffeeType: CoffeeType): string {
  return JSON.stringify(CoffeeType$outboundSchema.parse(coffeeType));
}

export function coffeeTypeFromJSON(
  jsonString: string,
): SafeParseResult<CoffeeType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CoffeeType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CoffeeType' from JSON`,
  );
}
