/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CoffeeOrderUpdateSize = {
  Small: "Small",
  Medium: "Medium",
  Large: "Large",
} as const;
export type CoffeeOrderUpdateSize = ClosedEnum<typeof CoffeeOrderUpdateSize>;

/**
 * Model for updating an existing coffee order (all fields optional)
 */
export type CoffeeOrderUpdate = {
  /**
   * Updated customer name
   */
  customerName?: string | null | undefined;
  /**
   * Updated coffee type (must match an existing coffee type)
   */
  coffeeType?: string | null | undefined;
  /**
   * Updated size of the coffee order
   */
  size?: CoffeeOrderUpdateSize | null | undefined;
  /**
   * Updated optional additions to the coffee order
   */
  extras?: Array<string> | null | undefined;
  /**
   * Updated total price of the order
   */
  price?: number | null | undefined;
};

/** @internal */
export const CoffeeOrderUpdateSize$inboundSchema: z.ZodNativeEnum<
  typeof CoffeeOrderUpdateSize
> = z.nativeEnum(CoffeeOrderUpdateSize);

/** @internal */
export const CoffeeOrderUpdateSize$outboundSchema: z.ZodNativeEnum<
  typeof CoffeeOrderUpdateSize
> = CoffeeOrderUpdateSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CoffeeOrderUpdateSize$ {
  /** @deprecated use `CoffeeOrderUpdateSize$inboundSchema` instead. */
  export const inboundSchema = CoffeeOrderUpdateSize$inboundSchema;
  /** @deprecated use `CoffeeOrderUpdateSize$outboundSchema` instead. */
  export const outboundSchema = CoffeeOrderUpdateSize$outboundSchema;
}

/** @internal */
export const CoffeeOrderUpdate$inboundSchema: z.ZodType<
  CoffeeOrderUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_name: z.nullable(z.string()).optional(),
  coffee_type: z.nullable(z.string()).optional(),
  size: z.nullable(CoffeeOrderUpdateSize$inboundSchema).optional(),
  extras: z.nullable(z.array(z.string())).optional(),
  price: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_name": "customerName",
    "coffee_type": "coffeeType",
  });
});

/** @internal */
export type CoffeeOrderUpdate$Outbound = {
  customer_name?: string | null | undefined;
  coffee_type?: string | null | undefined;
  size?: string | null | undefined;
  extras?: Array<string> | null | undefined;
  price?: number | null | undefined;
};

/** @internal */
export const CoffeeOrderUpdate$outboundSchema: z.ZodType<
  CoffeeOrderUpdate$Outbound,
  z.ZodTypeDef,
  CoffeeOrderUpdate
> = z.object({
  customerName: z.nullable(z.string()).optional(),
  coffeeType: z.nullable(z.string()).optional(),
  size: z.nullable(CoffeeOrderUpdateSize$outboundSchema).optional(),
  extras: z.nullable(z.array(z.string())).optional(),
  price: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    customerName: "customer_name",
    coffeeType: "coffee_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CoffeeOrderUpdate$ {
  /** @deprecated use `CoffeeOrderUpdate$inboundSchema` instead. */
  export const inboundSchema = CoffeeOrderUpdate$inboundSchema;
  /** @deprecated use `CoffeeOrderUpdate$outboundSchema` instead. */
  export const outboundSchema = CoffeeOrderUpdate$outboundSchema;
  /** @deprecated use `CoffeeOrderUpdate$Outbound` instead. */
  export type Outbound = CoffeeOrderUpdate$Outbound;
}

export function coffeeOrderUpdateToJSON(
  coffeeOrderUpdate: CoffeeOrderUpdate,
): string {
  return JSON.stringify(
    CoffeeOrderUpdate$outboundSchema.parse(coffeeOrderUpdate),
  );
}

export function coffeeOrderUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CoffeeOrderUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CoffeeOrderUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CoffeeOrderUpdate' from JSON`,
  );
}
