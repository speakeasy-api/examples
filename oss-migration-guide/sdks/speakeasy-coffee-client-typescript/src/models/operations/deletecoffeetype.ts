/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCoffeeTypeRequest = {
  /**
   * The ID of the coffee type to operate on
   */
  typeId: number;
};

/** @internal */
export const DeleteCoffeeTypeRequest$inboundSchema: z.ZodType<
  DeleteCoffeeTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "type_id": "typeId",
  });
});

/** @internal */
export type DeleteCoffeeTypeRequest$Outbound = {
  type_id: number;
};

/** @internal */
export const DeleteCoffeeTypeRequest$outboundSchema: z.ZodType<
  DeleteCoffeeTypeRequest$Outbound,
  z.ZodTypeDef,
  DeleteCoffeeTypeRequest
> = z.object({
  typeId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    typeId: "type_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCoffeeTypeRequest$ {
  /** @deprecated use `DeleteCoffeeTypeRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCoffeeTypeRequest$inboundSchema;
  /** @deprecated use `DeleteCoffeeTypeRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCoffeeTypeRequest$outboundSchema;
  /** @deprecated use `DeleteCoffeeTypeRequest$Outbound` instead. */
  export type Outbound = DeleteCoffeeTypeRequest$Outbound;
}

export function deleteCoffeeTypeRequestToJSON(
  deleteCoffeeTypeRequest: DeleteCoffeeTypeRequest,
): string {
  return JSON.stringify(
    DeleteCoffeeTypeRequest$outboundSchema.parse(deleteCoffeeTypeRequest),
  );
}

export function deleteCoffeeTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCoffeeTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCoffeeTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCoffeeTypeRequest' from JSON`,
  );
}
