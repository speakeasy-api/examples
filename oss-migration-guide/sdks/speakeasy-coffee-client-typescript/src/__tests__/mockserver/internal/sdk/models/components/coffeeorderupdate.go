// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CoffeeOrderUpdateSize string

const (
	CoffeeOrderUpdateSizeSmall  CoffeeOrderUpdateSize = "Small"
	CoffeeOrderUpdateSizeMedium CoffeeOrderUpdateSize = "Medium"
	CoffeeOrderUpdateSizeLarge  CoffeeOrderUpdateSize = "Large"
)

func (e CoffeeOrderUpdateSize) ToPointer() *CoffeeOrderUpdateSize {
	return &e
}
func (e *CoffeeOrderUpdateSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Small":
		fallthrough
	case "Medium":
		fallthrough
	case "Large":
		*e = CoffeeOrderUpdateSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CoffeeOrderUpdateSize: %v", v)
	}
}

// CoffeeOrderUpdate - Model for updating an existing coffee order (all fields optional)
type CoffeeOrderUpdate struct {
	// Updated customer name
	CustomerName *string `json:"customer_name,omitempty"`
	// Updated coffee type (must match an existing coffee type)
	CoffeeType *string `json:"coffee_type,omitempty"`
	// Updated size of the coffee order
	Size *CoffeeOrderUpdateSize `json:"size,omitempty"`
	// Updated optional additions to the coffee order
	Extras []string `json:"extras,omitempty"`
	// Updated total price of the order
	Price *float64 `json:"price,omitempty"`
}

func (o *CoffeeOrderUpdate) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *CoffeeOrderUpdate) GetCoffeeType() *string {
	if o == nil {
		return nil
	}
	return o.CoffeeType
}

func (o *CoffeeOrderUpdate) GetSize() *CoffeeOrderUpdateSize {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *CoffeeOrderUpdate) GetExtras() []string {
	if o == nil {
		return nil
	}
	return o.Extras
}

func (o *CoffeeOrderUpdate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}
