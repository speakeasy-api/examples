// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CoffeeOrderSize - Size of the coffee order
type CoffeeOrderSize string

const (
	CoffeeOrderSizeSmall  CoffeeOrderSize = "Small"
	CoffeeOrderSizeMedium CoffeeOrderSize = "Medium"
	CoffeeOrderSizeLarge  CoffeeOrderSize = "Large"
)

func (e CoffeeOrderSize) ToPointer() *CoffeeOrderSize {
	return &e
}
func (e *CoffeeOrderSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Small":
		fallthrough
	case "Medium":
		fallthrough
	case "Large":
		*e = CoffeeOrderSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CoffeeOrderSize: %v", v)
	}
}

// CoffeeOrder - Represents a coffee order in the system
type CoffeeOrder struct {
	// Unique identifier for the order
	ID int64 `json:"id"`
	// Name of the customer placing the order
	CustomerName string `json:"customer_name"`
	// Type of coffee ordered (must match an existing coffee type)
	CoffeeType string `json:"coffee_type"`
	// Size of the coffee order
	Size CoffeeOrderSize `json:"size"`
	// Optional additions to the coffee order
	Extras []string `json:"extras,omitempty"`
	// Total price of the order
	Price float64 `json:"price"`
}

func (o *CoffeeOrder) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *CoffeeOrder) GetCustomerName() string {
	if o == nil {
		return ""
	}
	return o.CustomerName
}

func (o *CoffeeOrder) GetCoffeeType() string {
	if o == nil {
		return ""
	}
	return o.CoffeeType
}

func (o *CoffeeOrder) GetSize() CoffeeOrderSize {
	if o == nil {
		return CoffeeOrderSize("")
	}
	return o.Size
}

func (o *CoffeeOrder) GetExtras() []string {
	if o == nil {
		return nil
	}
	return o.Extras
}

func (o *CoffeeOrder) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}
