/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ACMECore } from "../core.js";
import { getTodoById } from "../funcs/getTodoById.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useACMEContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GetTodoByIdQueryData = components.Todo;

/**
 * Get a todo item by id
 */
export function useGetTodoById(
  request: operations.GetTodoByIdRequest,
  options?: QueryHookOptions<GetTodoByIdQueryData>,
): UseQueryResult<GetTodoByIdQueryData, Error> {
  const client = useACMEContext();
  return useQuery({
    ...buildGetTodoByIdQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a todo item by id
 */
export function useGetTodoByIdSuspense(
  request: operations.GetTodoByIdRequest,
  options?: SuspenseQueryHookOptions<GetTodoByIdQueryData>,
): UseSuspenseQueryResult<GetTodoByIdQueryData, Error> {
  const client = useACMEContext();
  return useSuspenseQuery({
    ...buildGetTodoByIdQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchGetTodoById(
  queryClient: QueryClient,
  client$: ACMECore,
  request: operations.GetTodoByIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGetTodoByIdQuery(
      client$,
      request,
    ),
  });
}

export function setGetTodoByIdData(
  client: QueryClient,
  queryKeyBase: [id: string],
  data: GetTodoByIdQueryData,
): GetTodoByIdQueryData | undefined {
  const key = queryKeyGetTodoById(...queryKeyBase);

  return client.setQueryData<GetTodoByIdQueryData>(key, data);
}

export function invalidateGetTodoById(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[id: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@acme/sdk", "getTodoById", ...queryKeyBase],
  });
}

export function invalidateAllGetTodoById(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@acme/sdk", "getTodoById"],
  });
}

export function buildGetTodoByIdQuery(
  client$: ACMECore,
  request: operations.GetTodoByIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<GetTodoByIdQueryData>;
} {
  return {
    queryKey: queryKeyGetTodoById(request.id),
    queryFn: async function getTodoByIdQueryFn(
      ctx,
    ): Promise<GetTodoByIdQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(getTodoById(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGetTodoById(id: string): QueryKey {
  return ["@acme/sdk", "getTodoById", id];
}
