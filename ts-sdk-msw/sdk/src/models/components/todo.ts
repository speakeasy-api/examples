/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Todo = {
  id: string;
  title: string;
  dueDate?: RFCDate | undefined;
  completed: boolean;
  createdAt: Date;
  updatedAt: Date;
};

/** @internal */
export const Todo$inboundSchema: z.ZodType<Todo, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    title: z.string(),
    due_date: z.string().transform(v => new RFCDate(v)).optional(),
    completed: z.boolean(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  }).transform((v) => {
    return remap$(v, {
      "due_date": "dueDate",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Todo$Outbound = {
  id: string;
  title: string;
  due_date?: string | undefined;
  completed: boolean;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const Todo$outboundSchema: z.ZodType<Todo$Outbound, z.ZodTypeDef, Todo> =
  z.object({
    id: z.string(),
    title: z.string(),
    dueDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
    completed: z.boolean(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      dueDate: "due_date",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Todo$ {
  /** @deprecated use `Todo$inboundSchema` instead. */
  export const inboundSchema = Todo$inboundSchema;
  /** @deprecated use `Todo$outboundSchema` instead. */
  export const outboundSchema = Todo$outboundSchema;
  /** @deprecated use `Todo$Outbound` instead. */
  export type Outbound = Todo$Outbound;
}

export function todoToJSON(todo: Todo): string {
  return JSON.stringify(Todo$outboundSchema.parse(todo));
}

export function todoFromJSON(
  jsonString: string,
): SafeParseResult<Todo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Todo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Todo' from JSON`,
  );
}
